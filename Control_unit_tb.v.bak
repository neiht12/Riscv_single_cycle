`timescale 1ns/1ps

module Control_Unit_Top_Tb;

    // Inputs
    reg clk;
    reg rst;
    reg [6:0] Op;
    reg [6:0] funct7;
    reg [2:0] funct3;

    // Outputs
    wire RegWrite, ALUSrc, MemWrite, ResultSrc, branch;
    wire [3:0] ALUControl;
    wire [1:0] ImmSrc;

    // Instantiate the Unit Under Test (UUT)
    Control_Unit_Top uut (
        .Op(Op),
        .RegWrite(RegWrite),
        .ImmSrc(ImmSrc),
        .ALUSrc(ALUSrc),
        .MemWrite(MemWrite),
        .ResultSrc(ResultSrc),
        .branch(branch),
        .funct3(funct3),
        .funct7(funct7),
        .ALUControl(ALUControl)
    );

    // Clock generation
    initial begin
        clk = 0;
        forever #5 clk = ~clk; // 10ns clock period
    end

    // Reset
    initial begin
        rst = 1;
        #15 rst = 0; // Release reset after 15ns
    end

    // Stimulus
    initial begin
        // Wait for reset deassertion
        #20;

        // Test sequence: mỗi lệnh cách nhau 2 clock
        // ---------------------
        // R-type (ADD)
        Op = 7'b0110011; funct3 = 3'b000; funct7 = 7'b0000000;
        @(posedge clk); #1;
        display_outputs("R-type (ADD)");

        // R-type (SUB)
        funct7 = 7'b0100000;
        @(posedge clk); #1;
        display_outputs("R-type (SUB)");

        // I-type (ADDI)
        Op = 7'b0010011; funct3 = 3'b000; funct7 = 7'b0000000;
        @(posedge clk); #1;
        display_outputs("I-type (ADDI)");

        // Load (LW)
        Op = 7'b0000011; funct3 = 3'b010;
        @(posedge clk); #1;
        display_outputs("LW");

        // Store (SW)
        Op = 7'b0100011; funct3 = 3'b010;
        @(posedge clk); #1;
        display_outputs("SW");

        // Branch (BEQ)
        Op = 7'b1100011; funct3 = 3'b000;
        @(posedge clk); #1;
        display_outputs("BEQ");

        $finish;
    end

    // Task for formatted output
    task display_outputs(input [100*8:1] label);
        begin
            $display("----- %s -----", label);
            $display("Time       = %0t ns", $time);
            $display("Op         = %b", Op);
            $display("funct3     = %b", funct3);
            $display("funct7     = %b", funct7);
            $display("RegWrite   = %b", RegWrite);
            $display("ALUSrc     = %b", ALUSrc);
            $display("MemWrite   = %b", MemWrite);
            $display("ResultSrc  = %b", ResultSrc);
            $display("Branch     = %b", branch);
            $display("ImmSrc     = %b", ImmSrc);
            $display("ALUControl = %b", ALUControl);
            $display("-----------------------------\n");
        end
    endtask

endmodule
